import React, { useState } from "react";
import "./Profile.css";

import {
  Camera,
  MapPin,
  Edit3,
  Award,
  TrendingUp,
  Bell,
  Globe,
  Settings,
  HelpCircle,
  Info,
} from "lucide-react";

const Profile = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [profile, setProfile] = useState({
    name: "‡§∞‡§æ‡§Æ ‡§ï‡•Å‡§Æ‡§æ‡§∞",
    location: "‡§ú‡§¨‡§≤‡§™‡•Å‡§∞, ‡§Æ‡§ß‡•ç‡§Ø ‡§™‡•ç‡§∞‡§¶‡•á‡§∂",
    phone: "+91 98765 43210",
    farmArea: "5 ‡§è‡§ï‡§°‡§º",
    soilType: "‡§ï‡§æ‡§≤‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä",
    mainCrop: "‡§ó‡•á‡§π‡•Ç‡§Ç, ‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®",
    experience: "15 ‡§µ‡§∞‡•ç‡§∑",
    premium: true,
  });

  const stats = [
    { id: 1, label: "‡§ï‡•Å‡§≤ ‡§∏‡•ç‡§ï‡•à‡§®", value: "47", Icon: Camera, colorClass: "icon-blue" },
    { id: 2, label: "‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§", value: "23", Icon: HelpCircle, colorClass: "icon-green" },
    { id: 3, label: "‡§™‡•à‡§¶‡§æ‡§µ‡§æ‡§∞ ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø", value: "+15%", Icon: TrendingUp, colorClass: "icon-orange" },
    { id: 4, label: "‡§™‡•Å‡§∞‡§∏‡•ç‡§ï‡§æ‡§∞ ‡§Ö‡§Ç‡§ï", value: "1,250", Icon: Award, colorClass: "icon-purple" },
  ];

  const achievements = [
    { id: 1, emoji: "üèÜ", title: "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡§ø‡§∏‡§æ‡§®", desc: "AI ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§ï‡§æ ‡§∏‡§´‡§≤ ‡§â‡§™‡§Ø‡•ã‡§ó", earned: true },
    { id: 2, emoji: "‚≠ê", title: "‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ", desc: "30 ‡§¶‡§ø‡§® ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§ê‡§™ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó", earned: true },
    { id: 3, emoji: "üåæ", title: "‡§´‡§∏‡§≤ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û", desc: "50 ‡§∏‡§´‡§≤ ‡§∏‡•ç‡§ï‡•à‡§® ‡§™‡•Ç‡§∞‡•á ‡§ï‡§∞‡•á‡§Ç", earned: false },
    { id: 4, emoji: "ü§ù", title: "‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§ø‡§ï ‡§∏‡§¶‡§∏‡•ç‡§Ø", desc: "‡§Ö‡§®‡•ç‡§Ø ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•á‡§Ç", earned: false },
  ];

  function toggleEdit() {
    setIsEditing((s) => !s);
  }
  function onChange(key, value) {
    setProfile((p) => ({ ...p, [key]: value }));
  }

  return (
    <div className="pm-page">
      {/* Header */}
      <div className="pm-card pm-header mt-13">
        <div className="pm-header-left">
          <div className="pm-avatar-placeholder">
            <div className="pm-avatar-circle">{profile.name.split(" ")[0]?.[0] || "U"}</div>
            <button className="pm-avatar-change" title="Change photo">
              <Camera size={16} />
            </button>
          </div>

          <div className="pm-meta">
            <div className="pm-name-row">
              <h2 className="pm-name">{profile.name}</h2>
              {profile.premium && <span className="pm-badge">‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ</span>}
            </div>

            <div className="pm-location">
              <MapPin size={14} className="icon-inline" />
              <span>{profile.location}</span>
            </div>

            <div className="pm-phone">{profile.phone}</div>
          </div>
        </div>

        <div className="pm-header-right">
          <button className="pm-edit-btn" onClick={toggleEdit}>
            <Edit3 size={16} />
            <span style={{ marginLeft: 8 }}>{isEditing ? "Save" : "Edit"}</span>
          </button>
        </div>
      </div>

      {/* Farm details */}
      <div className="pm-card pm-details">
        <h3 className="pm-card-title">‡§ñ‡•á‡§§ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£</h3>
        <div className="pm-details-grid">
          <div className="pm-detail">
            <div className="label">‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≤</div>
            {isEditing ? (
              <input className="pm-input" value={profile.farmArea} onChange={(e) => onChange("farmArea", e.target.value)} />
            ) : (
              <div className="value">{profile.farmArea}</div>
            )}
          </div>

          <div className="pm-detail">
            <div className="label">‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞</div>
            {isEditing ? (
              <input className="pm-input" value={profile.soilType} onChange={(e) => onChange("soilType", e.target.value)} />
            ) : (
              <div className="value">{profile.soilType}</div>
            )}
          </div>

          <div className="pm-detail">
            <div className="label">‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§´‡§º‡§∏‡§≤</div>
            {isEditing ? (
              <input className="pm-input" value={profile.mainCrop} onChange={(e) => onChange("mainCrop", e.target.value)} />
            ) : (
              <div className="value">{profile.mainCrop}</div>
            )}
          </div>

          <div className="pm-detail">
            <div className="label">‡§Ö‡§®‡•Å‡§≠‡§µ</div>
            {isEditing ? (
              <input className="pm-input" value={profile.experience} onChange={(e) => onChange("experience", e.target.value)} />
            ) : (
              <div className="value">{profile.experience}</div>
            )}
          </div>
        </div>
      </div>

      {/* Stats */}
      <div className="pm-stats">
        {stats.map((s) => (
          <div key={s.id} className="pm-stat-card">
            <div className="pm-stat-icon">
              <s.Icon size={20} className={s.colorClass + " icon-inline"} />
            </div>
            <div className="pm-stat-value">{s.value}</div>
            <div className="pm-stat-label">{s.label}</div>
          </div>
        ))}
      </div>

      {/* Achievements (with emoji) */}
      <div className="pm-card pm-achievements">
        <h3 className="pm-card-title">‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø‡§Ø‡§æ‡§Ç</h3>
        <div className="pm-ach-grid">
          {achievements.map((a) => (
            <div key={a.id} className={`pm-ach-item ${a.earned ? "earned" : "locked"}`}>
              <div className="ach-emoji">{a.emoji}</div>
              <div className="ach-text">
                <div className="ach-title">{a.title}</div>
                <div className="ach-desc">{a.desc}</div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Menu */}
      <div className="pm-card pm-menu">
        <div className="pm-menu-row"><div className="menu-left"><Settings size={16} className="icon-inline" /> <span>‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏</span></div><div>‚Ä∫</div></div>
        <div className="pm-menu-row"><div className="menu-left"><Bell size={16} className="icon-inline" /> <span>‡§∏‡•Ç‡§ö‡§®‡§æ‡§è‡§Å</span></div><div>‚Ä∫</div></div>
        <div className="pm-menu-row"><div className="menu-left"><Globe size={16} className="icon-inline" /> <span>‡§≠‡§æ‡§∑‡§æ</span></div><div>‚Ä∫</div></div>
        <div className="pm-menu-row"><div className="menu-left"><HelpCircle size={16} className="icon-inline" /> <span>‡§∏‡§π‡§æ‡§Ø‡§§‡§æ</span></div><div>‚Ä∫</div></div>
        <div className="pm-menu-row"><div className="menu-left"><Info size={16} className="icon-inline" /> <span>‡§ê‡§™ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç</span></div><div>‚Ä∫</div></div>
      </div>

      <div className="pm-footer mb-16">
        <div>‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü‡§´‡§æ‡§∞‡•ç‡§Æ - ‡§ï‡•É‡§∑‡§ø ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞ ‡§ê‡§™</div>
        <div>‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ 1.0.0 | ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§≠‡§æ‡§∞‡§§ ‡§Æ‡•á‡§Ç üáÆüá≥</div>
        <div>¬© 2024 ‡§∏‡§≠‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§</div>
      </div>
    </div>
  );
};

export default Profile;
